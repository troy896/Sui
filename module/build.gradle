import org.apache.tools.ant.filters.FixCrLfFilter

import java.security.MessageDigest

plugins {
    id('com.android.application')
    id('dev.rikka.tools.refine')
}

apply from: file(rootProject.file('module.gradle'))

android {
    namespace "rikka.sui"
    defaultConfig {
        versionCode gitCommitCount
        versionName moduleVersion.substring(1)
        externalNativeBuild {
            cmake {
                arguments "-DFLAVOR=zygisk",
                        "-DZYGISK_MODULE_ID:STRING=\"$moduleId\"",
                        "-DANDROID_STL=none"
            }
        }
    }
    buildFeatures {
        viewBinding true
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.31.0+"
        }
    }
    buildTypes {
        debug {
            defaultConfig.minSdk 24
            multiDexEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
    }
    dependenciesInfo {
        includeInApk false
    }
}

dependencies {
    implementation libs.refine.runtime

    implementation 'org.lsposed.libcxx:libcxx:27.0.12077973'
    implementation 'dev.rikka.ndk.thirdparty:nativehelper:1.0.1'
    implementation 'dev.rikka.rikkax.parcelablelist:parcelablelist:2.0.1'

    implementation "androidx.annotation:annotation:1.9.1"
    implementation 'androidx.core:core:1.16.0'

    implementation project(':aidl')
    implementation project(':shared')
    implementation project(':api')
    implementation project(':rish')
    implementation project(':server-shared')

    implementation libs.hidden.compat
    compileOnly libs.hidden.stub
}

def outDir = file("$rootDir/out")

afterEvaluate {
    def isIDE = properties.containsKey('android.injected.invoked.from.ide')
    if (isIDE) {
        println("Invoked from IDE")
    } else {
        println("Invoked from command line")
    }

    android.applicationVariants.all { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()
        def buildTypeCapped = variant.getBuildType().getName().capitalize()
        def buildTypeLowered = variant.getBuildType().getName().toLowerCase()

        def zipName = "sui-${moduleVersion}-${buildTypeLowered}.zip"
        def magiskDir = file("$outDir/${buildTypeLowered}")

        tasks.getByName("pre${variantCapped}Build").dependsOn(":ui:assemble${buildTypeCapped}")

        task("prepareMagiskFiles${variantCapped}", type: Sync) {
            dependsOn("assemble$variantCapped")

            def templatePath = "$rootDir/template/magisk_module"

            into magiskDir
            from(templatePath) {
                exclude 'module.prop'
            }
            from(templatePath) {
                include 'module.prop'
                expand([
                        id         : moduleId,
                        name       : moduleName,
                        version    : moduleVersion,
                        versionCode: moduleVersionCode.toString(),
                        author     : moduleAuthor,
                        description: moduleDescription,
                        updateJson : "https://rikkaapps.github.io/release/sui_zygisk.json",
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from((buildTypeLowered == "release") ?
                    "$buildDir/intermediates/dex/${variant.name}/minify${variantCapped}WithR8" :
                    "$buildDir/intermediates/dex/${variant.name}/mergeDex$variantCapped") {
                include 'classes.dex'
                rename { 'sui.dex' }
            }
            from("$buildDir/intermediates/stripped_native_libs/${variant.name}/strip${variantCapped}DebugSymbols/out/lib") {
                into 'lib'
            }
            from("${rootProject.findProject('ui').buildDir}/outputs/apk/$buildTypeLowered") {
                exclude 'output-metadata.json'
                rename { 'sui.apk' }
            }
            doLast {
                fileTree("$magiskDir").visit { f ->
                    if (f.directory) return
                    if (f.file.name == '.gitattributes') return

                    def md = MessageDigest.getInstance("SHA-256")
                    f.file.eachByte 4096, { bytes, size ->
                        md.update(bytes, 0, size)
                    }
                    file(f.file.path + ".sha256sum").text = md.digest().encodeHex()
                }
            }
        }

        task("zip${variantCapped}", type: Zip) {
            dependsOn("prepareMagiskFiles${variantCapped}")
            from magiskDir
            archiveFileName = zipName
            destinationDirectory = outDir
        }

        task("push${variantCapped}", type: Exec) {
            dependsOn("assemble${variantCapped}")
            workingDir outDir
            commandLine android.adbExecutable, "push", zipName, "/data/local/tmp/"
        }

        task("flash${variantCapped}", type: Exec) {
            dependsOn("push${variantCapped}")
            commandLine android.adbExecutable, "shell", "su", "-c",
                    "magisk --install-module /data/local/tmp/${zipName}"
        }

        task("flashAndReboot${variantCapped}", type: Exec) {
            dependsOn("flash${variantCapped}")
            commandLine android.adbExecutable, "shell", "reboot"
        }

        variant.assembleProvider.get().finalizedBy("zip${variantCapped}")
    }
}
