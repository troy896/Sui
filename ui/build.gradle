import java.nio.file.Files
import java.nio.file.Paths

plugins {
    id('com.android.application')
    id('org.jetbrains.kotlin.android')
    id('dev.rikka.tools.refine')
}

apply from: file(rootProject.file('module.gradle'))

android {
    namespace "rikka.sui"
    defaultConfig {
        versionCode gitCommitCount
        versionName moduleVersion.substring(1)
        resConfigs 'en', 'zh', 'zh-rCN', 'zh-rTW'
    }
    buildFeatures {
        viewBinding true
        buildConfig true
    }
    buildTypes {
        debug {
            defaultConfig.minSdk 24
            multiDexEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude '/META-INF/*.version'
        exclude '/META-INF/*.kotlin_module'
        exclude '/kotlin/**'
        exclude '**.bin'
    }
    lintOptions {
        checkReleaseBuilds false
    }
    dependenciesInfo {
        includeInApk false
    }
}

configurations.configureEach {
    exclude group: 'androidx.appcompat', module: 'appcompat'
}

dependencies {
    implementation libs.refine.runtime

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2"

    implementation project(':aidl')
    implementation project(':api')
    compileOnly libs.hidden.stub
    implementation 'dev.rikka.rikkax.parcelablelist:parcelablelist:2.0.1'

    implementation 'dev.rikka.rikkax.appcompat:appcompat:1.6.1'
    implementation 'dev.rikka.rikkax.material:material:2.7.2'
    implementation 'dev.rikka.rikkax.insets:insets:1.3.0'
    implementation 'dev.rikka.rikkax.lifecycle:lifecycle-resource-livedata:1.0.1'
    implementation 'dev.rikka.rikkax.lifecycle:lifecycle-viewmodel-lazy:2.0.0'
    implementation 'dev.rikka.rikkax.recyclerview:recyclerview-adapter:1.3.0'
    implementation 'dev.rikka.rikkax.recyclerview:recyclerview-ktx:1.3.2'
    implementation 'dev.rikka.rikkax.widget:borderview:1.1.0'
    implementation 'dev.rikka.rikkax.html:html-ktx:1.1.2'

    implementation "androidx.annotation:annotation:1.9.1"
    implementation 'androidx.core:core-ktx:1.16.0'
    implementation 'androidx.fragment:fragment-ktx:1.8.8'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.9.1'

    implementation 'com.google.android.material:material:1.12.0'

    implementation 'me.zhanghai.android.fastscroll:library:1.2.0'
    implementation 'me.zhanghai.android.appiconloader:appiconloader:1.5.0'
}

afterEvaluate {
    android.applicationVariants.all { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()

        if (variant.getBuildType().isMinifyEnabled()) {
            def processResourcesTask = tasks.getByName("process${variantCapped}Resources")
            def optimizeResourceTask = tasks.getByName("optimize${variantCapped}Resources").doLast {
                def aapt2 = Paths.get(project.android.sdkDirectory.path, 'build-tools', project.android.buildToolsVersion, 'aapt2')
                def zip = Paths.get(project.buildDir.path, 'intermediates',
                        'processed_res', variantLowered, 'out', "resources-${variantLowered}.ap_")
                def map = Paths.get(project.buildDir.path, 'outputs',
                        'mapping', variantLowered, 'resources.txt')
                Files.createDirectories(map.getParent())
                def optimized = new File("${zip}.opt")
                def cmd = exec {
                    commandLine aapt2, 'optimize', '--collapse-resource-names',
                            '--shorten-resource-paths',
                            '--resources-config-path', 'aapt2-resources.cfg',
                            '--resource-path-shortening-map', map,
                            '-o', optimized, zip
                    ignoreExitValue false
                }
                if (cmd.exitValue == 0) {
                    delete(zip)
                    optimized.renameTo("$zip")
                }
            }
            optimizeResourceTask.onlyIf {
                !processResourcesTask.state.upToDate
            }
            processResourcesTask.finalizedBy(optimizeResourceTask)
        }
    }
}
